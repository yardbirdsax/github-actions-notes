// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ghworkflow "github.com/yardbirdsax/go-ghworkflow"
)

// MockWorkflowRunner is a mock of WorkflowRunner interface.
type MockWorkflowRunner struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRunnerMockRecorder
}

// MockWorkflowRunnerMockRecorder is the mock recorder for MockWorkflowRunner.
type MockWorkflowRunnerMockRecorder struct {
	mock *MockWorkflowRunner
}

// NewMockWorkflowRunner creates a new mock instance.
func NewMockWorkflowRunner(ctrl *gomock.Controller) *MockWorkflowRunner {
	mock := &MockWorkflowRunner{ctrl: ctrl}
	mock.recorder = &MockWorkflowRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRunner) EXPECT() *MockWorkflowRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorkflowRunner) Run(path string, inputs map[string]interface{}) *ghworkflow.WorkflowRun {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", path, inputs)
	ret0, _ := ret[0].(*ghworkflow.WorkflowRun)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkflowRunnerMockRecorder) Run(path, inputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorkflowRunner)(nil).Run), path, inputs)
}
