// Code generated by "enumer -type JobState -json"; DO NOT EDIT.

package distributed

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _JobStateName = "NotStartedReadyStartedSucceededFailedDependencyFailed"

var _JobStateIndex = [...]uint8{0, 10, 15, 22, 31, 37, 53}

const _JobStateLowerName = "notstartedreadystartedsucceededfaileddependencyfailed"

func (i JobState) String() string {
	if i < 0 || i >= JobState(len(_JobStateIndex)-1) {
		return fmt.Sprintf("JobState(%d)", i)
	}
	return _JobStateName[_JobStateIndex[i]:_JobStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JobStateNoOp() {
	var x [1]struct{}
	_ = x[NotStarted-(0)]
	_ = x[Ready-(1)]
	_ = x[Started-(2)]
	_ = x[Succeeded-(3)]
	_ = x[Failed-(4)]
	_ = x[DependencyFailed-(5)]
}

var _JobStateValues = []JobState{NotStarted, Ready, Started, Succeeded, Failed, DependencyFailed}

var _JobStateNameToValueMap = map[string]JobState{
	_JobStateName[0:10]:       NotStarted,
	_JobStateLowerName[0:10]:  NotStarted,
	_JobStateName[10:15]:      Ready,
	_JobStateLowerName[10:15]: Ready,
	_JobStateName[15:22]:      Started,
	_JobStateLowerName[15:22]: Started,
	_JobStateName[22:31]:      Succeeded,
	_JobStateLowerName[22:31]: Succeeded,
	_JobStateName[31:37]:      Failed,
	_JobStateLowerName[31:37]: Failed,
	_JobStateName[37:53]:      DependencyFailed,
	_JobStateLowerName[37:53]: DependencyFailed,
}

var _JobStateNames = []string{
	_JobStateName[0:10],
	_JobStateName[10:15],
	_JobStateName[15:22],
	_JobStateName[22:31],
	_JobStateName[31:37],
	_JobStateName[37:53],
}

// JobStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobStateString(s string) (JobState, error) {
	if val, ok := _JobStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JobStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobState values", s)
}

// JobStateValues returns all values of the enum
func JobStateValues() []JobState {
	return _JobStateValues
}

// JobStateStrings returns a slice of all String values of the enum
func JobStateStrings() []string {
	strs := make([]string, len(_JobStateNames))
	copy(strs, _JobStateNames)
	return strs
}

// IsAJobState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobState) IsAJobState() bool {
	for _, v := range _JobStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobState
func (i JobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobState
func (i *JobState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobState should be a string, got %s", data)
	}

	var err error
	*i, err = JobStateString(s)
	return err
}
